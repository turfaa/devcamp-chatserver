// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrderResourceItf is a mock of OrderResourceItf interface
type MockOrderResourceItf struct {
	ctrl     *gomock.Controller
	recorder *MockOrderResourceItfMockRecorder
}

// MockOrderResourceItfMockRecorder is the mock recorder for MockOrderResourceItf
type MockOrderResourceItfMockRecorder struct {
	mock *MockOrderResourceItf
}

// NewMockOrderResourceItf creates a new mock instance
func NewMockOrderResourceItf(ctrl *gomock.Controller) *MockOrderResourceItf {
	mock := &MockOrderResourceItf{ctrl: ctrl}
	mock.recorder = &MockOrderResourceItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderResourceItf) EXPECT() *MockOrderResourceItfMockRecorder {
	return m.recorder
}

// GetStock mocks base method
func (m *MockOrderResourceItf) GetStock(productID int) int {
	ret := m.ctrl.Call(m, "GetStock", productID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetStock indicates an expected call of GetStock
func (mr *MockOrderResourceItfMockRecorder) GetStock(productID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStock", reflect.TypeOf((*MockOrderResourceItf)(nil).GetStock), productID)
}

// InsertOrder mocks base method
func (m *MockOrderResourceItf) InsertOrder(arg0 *Order) error {
	ret := m.ctrl.Call(m, "InsertOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrder indicates an expected call of InsertOrder
func (mr *MockOrderResourceItfMockRecorder) InsertOrder(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockOrderResourceItf)(nil).InsertOrder), arg0)
}
